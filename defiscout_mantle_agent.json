{
  "name": "defiscout-mantle-agent",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1560,
        120
      ],
      "id": "7520d82f-b016-4971-83fe-13bacf7efed8",
      "name": "Telegram Trigger2",
      "webhookId": "d164910a-f343-4f69-a9e1-783e36427355",
      "credentials": {
        "telegramApi": {
          "id": "FW6pts6WnXbe5iHH",
          "name": "teleFL"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger2').item.json.message.chat.id }}",
        "text": "=The address was not found. Make sure that you have sent the correct Ethereum-address starting with 0x and try again",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -900,
        220
      ],
      "id": "966201d3-269e-4f7a-b82b-7f7e6b745716",
      "name": "ERROR MSG2",
      "webhookId": "b71565fd-73f2-46c7-8a25-0869a532dab0",
      "credentials": {
        "telegramApi": {
          "id": "FW6pts6WnXbe5iHH",
          "name": "teleFL"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger2').item.json.message.chat.id }}",
        "text": "Please wait a few minutes. I will check all the information and give you recommendations!",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -900,
        20
      ],
      "id": "8ddce85e-056c-47a3-88fc-8691fd9dfa8a",
      "name": "PLEASE WAIT MSG2",
      "webhookId": "4c5fd6ee-62ec-4ff7-badf-fe973b0899f0",
      "credentials": {
        "telegramApi": {
          "id": "FW6pts6WnXbe5iHH",
          "name": "teleFL"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger2').item.json.message.chat.id }}",
        "text": "={{ $('adaptation Markdown2').item.json.messageEscaped }}",
        "replyMarkup": "=",
        "forceReply": {},
        "replyKeyboardOptions": {},
        "replyKeyboardRemove": {},
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        820,
        20
      ],
      "id": "5b1cce2a-2247-4e0f-8034-16cdc8bd9aeb",
      "name": "RESPONSE TO USER2",
      "webhookId": "b71565fd-73f2-46c7-8a25-0869a532dab0",
      "credentials": {
        "telegramApi": {
          "id": "FW6pts6WnXbe5iHH",
          "name": "teleFL"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot8011194727:AAHTLQM5ba3p68Gc0qX7ZeqvVmLHlwKCGPk/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": \"{{$json.chat_id}}\",\n  \"text\": \"{{$json.messageEscaped}}\",\n  \"parse_mode\": \"MarkdownV2\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        600,
        20
      ],
      "id": "1dc5c0b3-fbb6-4181-a2a3-bfa9121bdbaf",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a8bdb1e6-7af2-41e6-9e5d-216087e270ba",
              "leftValue": "={{ $json.wallet }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1120,
        120
      ],
      "id": "59e6f896-3f27-4aee-ad68-fdf53cb17e1a",
      "name": "If2"
    },
    {
      "parameters": {
        "model": "openai/o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        40,
        240
      ],
      "id": "7184f9a9-c955-4890-bec2-c1ad9954d5bc",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "AAmyi1FI3eCgvLVG",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Общение с Nebula",
        "method": "POST",
        "url": "https://nebula-api.thirdweb.com/chat",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-secret-key",
              "value": "QFunJuPhqXyoomhWnORsRk7vWZmSgpqLKfyl1d4JQugnx3ksmF_TwI_c9akJS0x5QUTIYYn-76MYu5oIFb3EEw"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `тут напиши свое сообщение для Nebula`, 'string') }}"
            },
            {
              "name": "stream",
              "value": "false"
            },
            {
              "name": "context",
              "value": "={{ { chain_ids: [\"5000\"], wallet_address: $('Extract a wallet from a message').item.json.wallet } }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        300,
        260
      ],
      "id": "7d2ccba9-15ce-48a7-b684-44f93dd3d104",
      "name": "nebula_api_too2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {
          "responseFormat": "text"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -740,
        360
      ],
      "id": "3784b2a6-9663-4f0e-afee-26a368a54d28",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "L6Kr2XHDsgey2BlI",
          "name": "testDavy"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "JaHIadOs0yHWoYCN",
          "mode": "list",
          "cachedResultName": "DeFillama_Mantle_Protocols"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -580,
        320
      ],
      "id": "7c3e8bcb-b83c-458d-bc1b-16f5e8b401d9",
      "name": "mantle_protocols2"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "0tulZ8gLtJVifN2N",
          "mode": "list",
          "cachedResultName": "Defi_Mantle_chains(сеть)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -460,
        340
      ],
      "id": "55dade0b-446b-4e29-92b1-72d9ee78b175",
      "name": "mantle_chain2"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "F4R3P0SbWKeE3dD4",
          "mode": "list",
          "cachedResultName": "по всем протоколам для прайсо"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -320,
        340
      ],
      "id": "684f1f7b-0cda-4973-b34e-f575596a216a",
      "name": "price2"
    },
    {
      "parameters": {
        "toolDescription": "Общение с Nebula",
        "method": "POST",
        "url": "https://nebula-api.thirdweb.com/chat",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-secret-key",
              "value": "QFunJuPhqXyoomhWnORsRk7vWZmSgpqLKfyl1d4JQugnx3ksmF_TwI_c9akJS0x5QUTIYYn-76MYu5oIFb3EEw"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `тут напиши свое сообщение для Nebula`, 'string') }}"
            },
            {
              "name": "stream",
              "value": "false"
            },
            {
              "name": "context",
              "value": "={{ { chain_ids: [\"5000\"], wallet_address: $('Extract a wallet from a message').item.json.wallet } }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -160,
        280
      ],
      "id": "c7f050d9-8f51-4f21-836a-81113b222f43",
      "name": "nebula_api_too3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Extract a wallet from a message').item.json.wallet }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "{\n  \"role\": \"agent\",\n  \"name\": \"mantle_wallet_analyzer\",\n  \"description\": \"AI agent analyzing the user's crypto portfolio in the Mantle ecosystem.\",\n  \"instructions\": [\n    \"Step 1: First, make a request through the tool 'wallet_query' to the API https://nebula-api.thirdweb.com/chat using 'wallet'.\",\n    \"Step 2: Wait for the results and get the list of assets that the user holds.\",\n    \"Step 3: Use these assets to call 'price1' (to get current prices), 'mantle_protocols1' (risk and return assessment of protocols), and 'mantle_chain2' (network activity).\",\n    \"Step 4: Analyze asset distribution, risks, liquidity, and trends.\",\n    \"Step 5: Form a JSON summary.\",\n    \"Step 6: Pass to the next stage an object with the key 'summary', where 'summary' is a JSON with key metrics and recommendations.\"\n  ],\n  \"input_format\": {\n    \"wallet\": \"string\",\n    \"wallet_info\": \"object\",\n    \"assets\": \"array\",\n    \"chains_result\": \"object\",\n    \"protocols_result\": \"object\"\n  },\n  \"output_format\": {\n    \"report\": \"string\",\n    \"summary\": {\n      \"highRiskProtocols\": \"array\",\n      \"suggestedRebalance\": \"array\",\n      \"underutilizedChains\": \"array\"\n    }\n  },\n  \"tools\": [\n    {\n      \"name\": \"wallet_query\",\n      \"description\": \"First get wallet info through the thirdweb API (assets, positions, activity).\"\n    },\n    {\n      \"name\": \"mantle_protocols1\",\n      \"description\": \"Then use data on Mantle protocols (TVL, risks, returns).\"\n    },\n    {\n      \"name\": \"mantle_chain1\",\n      \"description\": \"Use data on Mantle networks (activity, engagement, TVL).\"\n    },\n    {\n      \"name\": \"price1\",\n      \"description\": \"Get current prices for wallet assets.\"\n    }\n  ],\n  \"pass_to_next\": true\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -520,
        20
      ],
      "id": "3fd04951-9e7e-421e-ba45-8a97abc6d62e",
      "name": "ANALYSIS"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Extract a wallet from a message').item.json.fullText }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "SYSTEM:\nYou are a Mantle DeFi Strategy Advisor AI. You will receive a single JSON object, `summary`, containing:\n- `walletAddress`: string\n- `timestamp`: ISO string\n- `assets`: array of up to 5 assets { symbol, balance, priceUsd, valueUsd, pctOfPort }\n- `protocols`: array of Mantle DeFi protocols { name, category ('lending' or 'liquidity'), tvl, apy, ltv?, fees?, volatility? }\n- `chains`: array of Mantle chain stats (optional)\n\nYour task is to:\n\n1. Asset Analysis\n   • Present a Markdown table of the top‐5 assets:\n     | Asset | Balance | Price (USD) | Value (USD) | % of Portfolio |\n     |-------|---------|-------------|-------------|----------------|\n\n2. Protocol Overview  \n   • Split `protocols` into two groups:\n     - 🏦 **Lending** (category = \"lending\")\n     - 💧 **Concentrated Liquidity** (category = \"liquidity\")  \n   • For each protocol, show key metrics:\n     - Lending: `APY`, `TVL`, `LTV`  \n     - Liquidity: `TVL`, `Fees`, `Volatility`\n\n3. Placement Strategies\n   For each asset in `assets`, recommend:\n   - 🏦 Lending\n     • Protocol name, APY, TVL  \n     • Suggested allocation (e.g. 50% of that asset)  \n   - 💧 **Concentrated Liquidity**  \n     • Pool name, recommended price range:  \n       `[priceUsd * (1 – volatility), priceUsd * (1 + volatility)]`  \n     • Estimated APR, note IL risk\n\nFORMAT:\n- Use **Markdown** with three sections:  \n  1. Asset Analysis  \n  2. Protocol Overview  \n  3. Placement Strategies  \n- Include emoji 🏦 & 💧, and Markdown tables for clarity.  \n- At the end add:  \n  ⚠️ This is not financial advice. The user makes the final decision.  \n- Finish with: Let’s go! 🚀\n\nUSER PROMPT: \ndata in 'summary'"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -20,
        0
      ],
      "id": "b9ca0010-4afc-4c49-bf4e-a5d7635239a2",
      "name": "Asset Allocation"
    },
    {
      "parameters": {
        "jsCode": "function escapeMarkdownV2(text) {\n  return text\n    .replace(/([_*\\[\\]()~`>#+=|{}.!\\-])/g, '\\\\$1') // спецсимволы MarkdownV2\n    .replace(/\\\\/g, '\\\\\\\\')                       // экранируем обратный слеш\n    .replace(/\"/g, '\\\\\"')                         // экранируем двойные кавычки\n    .replace(/\\n/g, '\\\\n');                       // переносы строк\n}\n\n// Получаем chat_id из Telegram Trigger\nconst chatId = $('Telegram Trigger2').first().json.message.chat.id;\n\n// Получаем текст из AI output\nconst rawText = $input.first().json.output || 'Empty message';\n\n// Экранируем текст\nconst escaped = escapeMarkdownV2(rawText);\n\nreturn [\n  {\n    json: {\n      chat_id: chatId,\n      messageEscaped: escaped   // <--- Используем экранированный текст!\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        20
      ],
      "id": "a83268f3-2156-4e0b-b3a1-a8280e7564b6",
      "name": "adaptation Markdown2"
    },
    {
      "parameters": {
        "jsCode": "const telegramText = $('Telegram Trigger2').first()?.json?.message?.text;\nconst inputText = $input.first()?.json?.text;\n\nconst text = (telegramText || inputText || '').toLowerCase();\nconst match = text.match(/(?:^|\\s)(0x[a-f0-9]{40})(?=\\s|$)/m);\n\nreturn [{\n  json: {\n    wallet: match ? match[1] : null,\n    message: match ? '✅ Адрес найден.' : '❌ Не удалось найти адрес в сообщении.',\n    fullText: text\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1340,
        120
      ],
      "id": "85a2b8b8-f41b-4ec7-95be-835dadc1ff4e",
      "name": "Extract a wallet from a message"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger2": {
      "main": [
        [
          {
            "node": "Extract a wallet from a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PLEASE WAIT MSG2": {
      "main": [
        [
          {
            "node": "ANALYSIS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "RESPONSE TO USER2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "PLEASE WAIT MSG2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ERROR MSG2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Asset Allocation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "nebula_api_too2": {
      "ai_tool": [
        [
          {
            "node": "Asset Allocation",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "ANALYSIS",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "mantle_protocols2": {
      "ai_tool": [
        [
          {
            "node": "ANALYSIS",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "mantle_chain2": {
      "ai_tool": [
        [
          {
            "node": "ANALYSIS",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "price2": {
      "ai_tool": [
        [
          {
            "node": "ANALYSIS",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "nebula_api_too3": {
      "ai_tool": [
        [
          {
            "node": "ANALYSIS",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ANALYSIS": {
      "main": [
        [
          {
            "node": "Asset Allocation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Asset Allocation": {
      "main": [
        [
          {
            "node": "adaptation Markdown2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "adaptation Markdown2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract a wallet from a message": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "82fac397-264f-48fa-a59d-36cc1440e9f3",
  "meta": {
    "instanceId": "ee6eea47c082d020b464b486c299fcc74833fad966a25b893934030abf5a82cb"
  },
  "id": "QBOrRirNcDzxrKgH",
  "tags": []
}